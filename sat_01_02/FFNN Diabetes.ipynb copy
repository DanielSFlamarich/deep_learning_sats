{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from torch.utils.data import Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the dataset using Pandas\n",
    "data = pd.read_csv('diabetes_train.csv',sep = ';')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  1.   85.   66.  ...   0.   26.6  31. ]\n",
      " [  1.   89.   66.  ...  94.   28.1  21. ]\n",
      " [  5.  116.   74.  ...   0.   25.6  30. ]\n",
      " ...\n",
      " [  6.  190.   92.  ...   0.   35.5  66. ]\n",
      " [  9.  170.   74.  ...   0.   44.   43. ]\n",
      " [  1.  126.   60.  ...   0.   30.1  47. ]]\n"
     ]
    }
   ],
   "source": [
    "# For x: Extract out the dataset from all the rows (all samples) and all columns except last column (all features). \n",
    "# For y: Extract out the last column (which is the label)\n",
    "# Convert both to numpy using the .values method\n",
    "x = data.iloc[:,0:-1].values\n",
    "y_string= list(data.iloc[:,-1])\n",
    "\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  1.   85.   66.   29.    0.   26.6  31. ]\n",
      " [  1.   89.   66.   23.   94.   28.1  21. ]\n",
      " [  5.  116.   74.    0.    0.   25.6  30. ]]\n",
      "['negative', 'negative', 'negative']\n"
     ]
    }
   ],
   "source": [
    "# Lets have a look some samples from our data\n",
    "print(x[:3])\n",
    "print(y_string[:3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Our neural network only understand numbers! So convert the string to labels\n",
    "y_int = []\n",
    "for string in y_string:\n",
    "    if string == 'positive':\n",
    "        y_int.append(1)\n",
    "    else:\n",
    "        y_int.append(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now convert to an array\n",
    "y = np.array(y_int, dtype = 'float64')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### $x^{\\prime}=\\frac{x-\\mu}{\\sigma}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature Normalization. All features should have the same range of values (-1,1)\n",
    "sc = StandardScaler()\n",
    "x = sc.fit_transform(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now we convert the arrays to PyTorch tensors\n",
    "x = torch.tensor(x)\n",
    "# We add an extra dimension to convert this array to 2D\n",
    "y = torch.tensor(y).unsqueeze(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([667, 7])\n",
      "torch.Size([667, 1])\n"
     ]
    }
   ],
   "source": [
    "print(x.shape)\n",
    "print(y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Dataset(Dataset):\n",
    "\n",
    "    def __init__(self,x,y):\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "        \n",
    "    def __getitem__(self,index):\n",
    "        # Get one item from the dataset\n",
    "        return self.x[index], self.y[index]\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = Dataset(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "667"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the data to your dataloader for batch processing and shuffling\n",
    "train_loader = torch.utils.data.DataLoader(dataset=dataset,\n",
    "                                           batch_size=32,\n",
    "                                           shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is 21 batches in the dataset\n",
      "For one iteration (batch), there is:\n",
      "Data:    torch.Size([32, 7])\n",
      "Labels:  torch.Size([32, 1])\n"
     ]
    }
   ],
   "source": [
    "# Let's have a look at the data loader\n",
    "print(\"There is {} batches in the dataset\".format(len(train_loader)))\n",
    "for (x,y) in train_loader:\n",
    "    print(\"For one iteration (batch), there is:\")\n",
    "    print(\"Data:    {}\".format(x.shape))\n",
    "    print(\"Labels:  {}\".format(y.shape))\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![demo](https://user-images.githubusercontent.com/30661597/60379583-246e5e80-9a68-11e9-8b7f-a4294234c201.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now let's build the above network\n",
    "class FFNN(nn.Module):\n",
    "    def __init__(self, input_features):\n",
    "        super(FFNN, self).__init__()\n",
    "        self.fc1 = nn.Linear(input_features, 5)\n",
    "        self.fc2 = nn.Linear(5, 4)\n",
    "        self.fc3 = nn.Linear(4, 3)\n",
    "        self.fc4 = nn.Linear(3, 1)\n",
    "        self.sigmoid = nn.Sigmoid()\n",
    "        self.tanh = nn.Tanh()\n",
    "\n",
    "    def forward(self, x):\n",
    "        out = self.fc1(x)\n",
    "        out = self.tanh(out)\n",
    "        out = self.fc2(out)\n",
    "        out = self.tanh(out)\n",
    "        out = self.fc3(out)\n",
    "        out = self.tanh(out)\n",
    "        out = self.fc4(out)\n",
    "        out = self.sigmoid(out)\n",
    "        return out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$H_{p}(q)=-\\frac{1}{N} \\sum_{i=1}^{N} y_{i} \\cdot \\log \\left(p\\left(y_{i}\\right)\\right)+\\left(1-y_{i}\\right) \\cdot \\log \\left(1-p\\left(y_{i}\\right)\\right)$\n",
    "\n",
    "\n",
    "cost = -(Y * torch.log(hypothesis) + (1 - Y) * torch.log(1 - hypothesis)).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/marcos/anaconda3/envs/week3d3/lib/python3.7/site-packages/torch/nn/_reduction.py:43: UserWarning: size_average and reduce args will be deprecated, please use reduction='mean' instead.\n",
      "  warnings.warn(warning.format(ret))\n"
     ]
    }
   ],
   "source": [
    "# Create the network (an object of the Net class)\n",
    "model = FFNN(x.shape[1])\n",
    "#In Binary Cross Entropy: the input and output should have the same shape \n",
    "#size_average = True --> the losses are averaged over observations for each minibatch\n",
    "criterion = torch.nn.BCELoss(size_average=True)   \n",
    "# We will use SGD with momentum with a learning rate of 0.1\n",
    "optimizer = torch.optim.SGD(model.parameters(), lr=0.1, momentum=0.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200, Loss: 0.639, Accuracy: 0.630\n",
      "Epoch 2/200, Loss: 0.650, Accuracy: 0.741\n",
      "Epoch 3/200, Loss: 0.512, Accuracy: 0.704\n",
      "Epoch 4/200, Loss: 0.497, Accuracy: 0.741\n",
      "Epoch 5/200, Loss: 0.560, Accuracy: 0.778\n",
      "Epoch 6/200, Loss: 0.380, Accuracy: 0.852\n",
      "Epoch 7/200, Loss: 0.540, Accuracy: 0.630\n",
      "Epoch 8/200, Loss: 0.372, Accuracy: 0.852\n",
      "Epoch 9/200, Loss: 0.524, Accuracy: 0.704\n",
      "Epoch 10/200, Loss: 0.403, Accuracy: 0.815\n",
      "Epoch 11/200, Loss: 0.633, Accuracy: 0.630\n",
      "Epoch 12/200, Loss: 0.401, Accuracy: 0.778\n",
      "Epoch 13/200, Loss: 0.353, Accuracy: 0.778\n",
      "Epoch 14/200, Loss: 0.423, Accuracy: 0.889\n",
      "Epoch 15/200, Loss: 0.514, Accuracy: 0.667\n",
      "Epoch 16/200, Loss: 0.868, Accuracy: 0.593\n",
      "Epoch 17/200, Loss: 0.374, Accuracy: 0.778\n",
      "Epoch 18/200, Loss: 0.258, Accuracy: 0.926\n",
      "Epoch 19/200, Loss: 0.589, Accuracy: 0.704\n",
      "Epoch 20/200, Loss: 0.524, Accuracy: 0.704\n",
      "Epoch 21/200, Loss: 0.407, Accuracy: 0.778\n",
      "Epoch 22/200, Loss: 0.597, Accuracy: 0.593\n",
      "Epoch 23/200, Loss: 0.509, Accuracy: 0.704\n",
      "Epoch 24/200, Loss: 0.368, Accuracy: 0.815\n",
      "Epoch 25/200, Loss: 0.411, Accuracy: 0.852\n",
      "Epoch 26/200, Loss: 0.391, Accuracy: 0.778\n",
      "Epoch 27/200, Loss: 0.425, Accuracy: 0.667\n",
      "Epoch 28/200, Loss: 0.264, Accuracy: 0.852\n",
      "Epoch 29/200, Loss: 0.453, Accuracy: 0.704\n",
      "Epoch 30/200, Loss: 0.382, Accuracy: 0.815\n",
      "Epoch 31/200, Loss: 0.337, Accuracy: 0.815\n",
      "Epoch 32/200, Loss: 0.321, Accuracy: 0.815\n",
      "Epoch 33/200, Loss: 0.256, Accuracy: 0.852\n",
      "Epoch 34/200, Loss: 0.464, Accuracy: 0.815\n",
      "Epoch 35/200, Loss: 0.393, Accuracy: 0.852\n",
      "Epoch 36/200, Loss: 0.562, Accuracy: 0.667\n",
      "Epoch 37/200, Loss: 0.312, Accuracy: 0.852\n",
      "Epoch 38/200, Loss: 0.335, Accuracy: 0.889\n",
      "Epoch 39/200, Loss: 0.402, Accuracy: 0.704\n",
      "Epoch 40/200, Loss: 0.563, Accuracy: 0.667\n",
      "Epoch 41/200, Loss: 0.531, Accuracy: 0.704\n",
      "Epoch 42/200, Loss: 0.378, Accuracy: 0.778\n",
      "Epoch 43/200, Loss: 0.477, Accuracy: 0.852\n",
      "Epoch 44/200, Loss: 0.393, Accuracy: 0.741\n",
      "Epoch 45/200, Loss: 0.493, Accuracy: 0.704\n",
      "Epoch 46/200, Loss: 0.379, Accuracy: 0.778\n",
      "Epoch 47/200, Loss: 0.623, Accuracy: 0.704\n",
      "Epoch 48/200, Loss: 0.565, Accuracy: 0.704\n",
      "Epoch 49/200, Loss: 0.393, Accuracy: 0.741\n",
      "Epoch 50/200, Loss: 0.451, Accuracy: 0.704\n",
      "Epoch 51/200, Loss: 0.479, Accuracy: 0.704\n",
      "Epoch 52/200, Loss: 0.403, Accuracy: 0.778\n",
      "Epoch 53/200, Loss: 0.228, Accuracy: 0.889\n",
      "Epoch 54/200, Loss: 0.330, Accuracy: 0.815\n",
      "Epoch 55/200, Loss: 0.354, Accuracy: 0.852\n",
      "Epoch 56/200, Loss: 0.374, Accuracy: 0.704\n",
      "Epoch 57/200, Loss: 0.358, Accuracy: 0.815\n",
      "Epoch 58/200, Loss: 0.305, Accuracy: 0.889\n",
      "Epoch 59/200, Loss: 0.434, Accuracy: 0.741\n",
      "Epoch 60/200, Loss: 0.467, Accuracy: 0.778\n",
      "Epoch 61/200, Loss: 0.451, Accuracy: 0.741\n",
      "Epoch 62/200, Loss: 0.426, Accuracy: 0.741\n",
      "Epoch 63/200, Loss: 0.358, Accuracy: 0.741\n",
      "Epoch 64/200, Loss: 0.454, Accuracy: 0.778\n",
      "Epoch 65/200, Loss: 0.337, Accuracy: 0.815\n",
      "Epoch 66/200, Loss: 0.387, Accuracy: 0.778\n",
      "Epoch 67/200, Loss: 0.484, Accuracy: 0.593\n",
      "Epoch 68/200, Loss: 0.478, Accuracy: 0.741\n",
      "Epoch 69/200, Loss: 0.474, Accuracy: 0.630\n",
      "Epoch 70/200, Loss: 0.312, Accuracy: 0.815\n",
      "Epoch 71/200, Loss: 0.419, Accuracy: 0.815\n",
      "Epoch 72/200, Loss: 0.333, Accuracy: 0.778\n",
      "Epoch 73/200, Loss: 0.642, Accuracy: 0.630\n",
      "Epoch 74/200, Loss: 0.603, Accuracy: 0.593\n",
      "Epoch 75/200, Loss: 0.340, Accuracy: 0.815\n",
      "Epoch 76/200, Loss: 0.251, Accuracy: 0.926\n",
      "Epoch 77/200, Loss: 0.275, Accuracy: 0.926\n",
      "Epoch 78/200, Loss: 0.402, Accuracy: 0.778\n",
      "Epoch 79/200, Loss: 0.461, Accuracy: 0.778\n",
      "Epoch 80/200, Loss: 0.231, Accuracy: 0.852\n",
      "Epoch 81/200, Loss: 0.365, Accuracy: 0.741\n",
      "Epoch 82/200, Loss: 0.478, Accuracy: 0.704\n",
      "Epoch 83/200, Loss: 0.356, Accuracy: 0.815\n",
      "Epoch 84/200, Loss: 0.508, Accuracy: 0.889\n",
      "Epoch 85/200, Loss: 0.402, Accuracy: 0.852\n",
      "Epoch 86/200, Loss: 0.452, Accuracy: 0.815\n",
      "Epoch 87/200, Loss: 0.458, Accuracy: 0.630\n",
      "Epoch 88/200, Loss: 0.361, Accuracy: 0.815\n",
      "Epoch 89/200, Loss: 0.374, Accuracy: 0.852\n",
      "Epoch 90/200, Loss: 0.486, Accuracy: 0.667\n",
      "Epoch 91/200, Loss: 0.378, Accuracy: 0.778\n",
      "Epoch 92/200, Loss: 0.467, Accuracy: 0.741\n",
      "Epoch 93/200, Loss: 0.514, Accuracy: 0.741\n",
      "Epoch 94/200, Loss: 0.458, Accuracy: 0.815\n",
      "Epoch 95/200, Loss: 0.334, Accuracy: 0.889\n",
      "Epoch 96/200, Loss: 0.315, Accuracy: 0.852\n",
      "Epoch 97/200, Loss: 0.291, Accuracy: 0.889\n",
      "Epoch 98/200, Loss: 0.450, Accuracy: 0.889\n",
      "Epoch 99/200, Loss: 0.517, Accuracy: 0.667\n",
      "Epoch 100/200, Loss: 0.590, Accuracy: 0.667\n",
      "Epoch 101/200, Loss: 0.434, Accuracy: 0.704\n",
      "Epoch 102/200, Loss: 0.692, Accuracy: 0.593\n",
      "Epoch 103/200, Loss: 0.402, Accuracy: 0.815\n",
      "Epoch 104/200, Loss: 0.468, Accuracy: 0.778\n",
      "Epoch 105/200, Loss: 0.371, Accuracy: 0.778\n",
      "Epoch 106/200, Loss: 0.309, Accuracy: 0.852\n",
      "Epoch 107/200, Loss: 0.545, Accuracy: 0.704\n",
      "Epoch 108/200, Loss: 0.779, Accuracy: 0.630\n",
      "Epoch 109/200, Loss: 0.519, Accuracy: 0.778\n",
      "Epoch 110/200, Loss: 0.433, Accuracy: 0.704\n",
      "Epoch 111/200, Loss: 0.443, Accuracy: 0.704\n",
      "Epoch 112/200, Loss: 0.445, Accuracy: 0.778\n",
      "Epoch 113/200, Loss: 0.300, Accuracy: 0.815\n",
      "Epoch 114/200, Loss: 0.444, Accuracy: 0.889\n",
      "Epoch 115/200, Loss: 0.314, Accuracy: 0.815\n",
      "Epoch 116/200, Loss: 0.396, Accuracy: 0.741\n",
      "Epoch 117/200, Loss: 0.302, Accuracy: 0.815\n",
      "Epoch 118/200, Loss: 0.480, Accuracy: 0.704\n",
      "Epoch 119/200, Loss: 0.325, Accuracy: 0.852\n",
      "Epoch 120/200, Loss: 0.378, Accuracy: 0.815\n",
      "Epoch 121/200, Loss: 0.361, Accuracy: 0.815\n",
      "Epoch 122/200, Loss: 0.447, Accuracy: 0.630\n",
      "Epoch 123/200, Loss: 0.343, Accuracy: 0.778\n",
      "Epoch 124/200, Loss: 0.199, Accuracy: 0.889\n",
      "Epoch 125/200, Loss: 0.741, Accuracy: 0.630\n",
      "Epoch 126/200, Loss: 0.310, Accuracy: 0.815\n",
      "Epoch 127/200, Loss: 0.489, Accuracy: 0.704\n",
      "Epoch 128/200, Loss: 0.318, Accuracy: 0.852\n",
      "Epoch 129/200, Loss: 0.279, Accuracy: 0.852\n",
      "Epoch 130/200, Loss: 0.517, Accuracy: 0.741\n",
      "Epoch 131/200, Loss: 0.456, Accuracy: 0.778\n",
      "Epoch 132/200, Loss: 0.319, Accuracy: 0.889\n",
      "Epoch 133/200, Loss: 0.367, Accuracy: 0.926\n",
      "Epoch 134/200, Loss: 0.471, Accuracy: 0.778\n",
      "Epoch 135/200, Loss: 0.412, Accuracy: 0.741\n",
      "Epoch 136/200, Loss: 0.396, Accuracy: 0.852\n",
      "Epoch 137/200, Loss: 0.578, Accuracy: 0.741\n",
      "Epoch 138/200, Loss: 0.376, Accuracy: 0.852\n",
      "Epoch 139/200, Loss: 0.406, Accuracy: 0.815\n",
      "Epoch 140/200, Loss: 0.364, Accuracy: 0.852\n",
      "Epoch 141/200, Loss: 0.380, Accuracy: 0.741\n",
      "Epoch 142/200, Loss: 0.388, Accuracy: 0.815\n",
      "Epoch 143/200, Loss: 0.375, Accuracy: 0.778\n",
      "Epoch 144/200, Loss: 0.454, Accuracy: 0.741\n",
      "Epoch 145/200, Loss: 0.344, Accuracy: 0.852\n",
      "Epoch 146/200, Loss: 0.369, Accuracy: 0.778\n",
      "Epoch 147/200, Loss: 0.313, Accuracy: 0.852\n",
      "Epoch 148/200, Loss: 0.588, Accuracy: 0.704\n",
      "Epoch 149/200, Loss: 0.505, Accuracy: 0.704\n",
      "Epoch 150/200, Loss: 0.284, Accuracy: 0.852\n",
      "Epoch 151/200, Loss: 0.213, Accuracy: 0.963\n",
      "Epoch 152/200, Loss: 0.512, Accuracy: 0.704\n",
      "Epoch 153/200, Loss: 0.371, Accuracy: 0.778\n",
      "Epoch 154/200, Loss: 0.351, Accuracy: 0.815\n",
      "Epoch 155/200, Loss: 0.221, Accuracy: 0.926\n",
      "Epoch 156/200, Loss: 0.343, Accuracy: 0.852\n",
      "Epoch 157/200, Loss: 0.270, Accuracy: 0.889\n",
      "Epoch 158/200, Loss: 0.422, Accuracy: 0.741\n",
      "Epoch 159/200, Loss: 0.367, Accuracy: 0.778\n",
      "Epoch 160/200, Loss: 0.364, Accuracy: 0.852\n",
      "Epoch 161/200, Loss: 0.623, Accuracy: 0.704\n",
      "Epoch 162/200, Loss: 0.459, Accuracy: 0.778\n",
      "Epoch 163/200, Loss: 0.369, Accuracy: 0.778\n",
      "Epoch 164/200, Loss: 0.452, Accuracy: 0.778\n",
      "Epoch 165/200, Loss: 0.367, Accuracy: 0.852\n",
      "Epoch 166/200, Loss: 0.427, Accuracy: 0.852\n",
      "Epoch 167/200, Loss: 0.367, Accuracy: 0.815\n",
      "Epoch 168/200, Loss: 0.613, Accuracy: 0.741\n",
      "Epoch 169/200, Loss: 0.389, Accuracy: 0.815\n",
      "Epoch 170/200, Loss: 0.293, Accuracy: 0.889\n",
      "Epoch 171/200, Loss: 0.280, Accuracy: 0.852\n",
      "Epoch 172/200, Loss: 0.296, Accuracy: 0.889\n",
      "Epoch 173/200, Loss: 0.534, Accuracy: 0.667\n",
      "Epoch 174/200, Loss: 0.337, Accuracy: 0.852\n",
      "Epoch 175/200, Loss: 0.438, Accuracy: 0.815\n",
      "Epoch 176/200, Loss: 0.393, Accuracy: 0.852\n",
      "Epoch 177/200, Loss: 0.280, Accuracy: 0.852\n",
      "Epoch 178/200, Loss: 0.137, Accuracy: 0.926\n",
      "Epoch 179/200, Loss: 0.371, Accuracy: 0.815\n",
      "Epoch 180/200, Loss: 0.320, Accuracy: 0.852\n",
      "Epoch 181/200, Loss: 0.342, Accuracy: 0.889\n",
      "Epoch 182/200, Loss: 0.279, Accuracy: 0.889\n",
      "Epoch 183/200, Loss: 0.397, Accuracy: 0.741\n",
      "Epoch 184/200, Loss: 0.306, Accuracy: 0.852\n",
      "Epoch 185/200, Loss: 0.595, Accuracy: 0.741\n",
      "Epoch 186/200, Loss: 0.425, Accuracy: 0.778\n",
      "Epoch 187/200, Loss: 0.325, Accuracy: 0.926\n",
      "Epoch 188/200, Loss: 0.515, Accuracy: 0.704\n",
      "Epoch 189/200, Loss: 0.566, Accuracy: 0.704\n",
      "Epoch 190/200, Loss: 0.556, Accuracy: 0.741\n",
      "Epoch 191/200, Loss: 0.194, Accuracy: 0.963\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 192/200, Loss: 0.667, Accuracy: 0.704\n",
      "Epoch 193/200, Loss: 0.346, Accuracy: 0.815\n",
      "Epoch 194/200, Loss: 0.377, Accuracy: 0.778\n",
      "Epoch 195/200, Loss: 0.424, Accuracy: 0.852\n",
      "Epoch 196/200, Loss: 0.434, Accuracy: 0.778\n",
      "Epoch 197/200, Loss: 0.536, Accuracy: 0.704\n",
      "Epoch 198/200, Loss: 0.602, Accuracy: 0.778\n",
      "Epoch 199/200, Loss: 0.336, Accuracy: 0.852\n",
      "Epoch 200/200, Loss: 0.375, Accuracy: 0.852\n"
     ]
    }
   ],
   "source": [
    "# Train the network \n",
    "num_epochs = 200\n",
    "for epoch in range(num_epochs):\n",
    "    for inputs,labels in train_loader:\n",
    "        inputs = inputs.float()\n",
    "        labels = labels.float()\n",
    "        # Feed Forward\n",
    "        output = model(inputs)\n",
    "        # Loss Calculation\n",
    "        loss = criterion(output, labels)\n",
    "        # Clear the gradient buffer (we don't want to accumulate gradients)\n",
    "        optimizer.zero_grad()\n",
    "        # Backpropagation \n",
    "        loss.backward()\n",
    "        # Weight Update: w <-- w - lr * gradient\n",
    "        optimizer.step()\n",
    "        \n",
    "    #Accuracy\n",
    "    # Since we are using a sigmoid, we will need to perform some thresholding\n",
    "    output = (output>0.5).float()\n",
    "    # Accuracy: (output == labels).float().sum() / output.shape[0]\n",
    "    accuracy = (output == labels).float().mean()\n",
    "    # Print statistics \n",
    "    print(\"Epoch {}/{}, Loss: {:.3f}, Accuracy: {:.3f}\".format(epoch+1,num_epochs, loss, accuracy))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('diabetes_test.csv',sep = ';')\n",
    "train_loader = torch.utils.data.DataLoader(dataset=dataset,\n",
    "                                           batch_size=32,\n",
    "                                           shuffle=True)\n",
    "output = model(inputs)\n",
    "output = (output>0.5).float()\n",
    "accuracy = (output == labels).float().mean()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.8519)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "week3d3",
   "language": "python",
   "name": "week3d3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
